'use strict';

var react = require('react');

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var useInfiniteScroll = function useInfiniteScroll(fetchCallback) {
  var _useState = react.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFetching = _useState2[0],
      setIsFetching = _useState2[1];

  react.useEffect(function () {
    if (!isFetching) return;
    fetchCallback();
  }, [isFetching]);
  react.useEffect(function () {
    window.addEventListener('scroll', handleScroll);
    return function () {
      return window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  function handleScroll() {
    var offsetHeight = document.documentElement.offsetHeight;
    var innerHeight = window.innerHeight;
    var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
    if (isFetching || innerHeight + scrollTop !== offsetHeight) return;
    setIsFetching(true);
  }

  return [isFetching, setIsFetching];
};

module.exports = useInfiniteScroll;
//# sourceMappingURL=index.js.map

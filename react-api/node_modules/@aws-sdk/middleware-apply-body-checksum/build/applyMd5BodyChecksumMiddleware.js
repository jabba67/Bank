"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var is_array_buffer_1 = require("@aws-sdk/is-array-buffer");
var protocol_http_1 = require("@aws-sdk/protocol-http");
function applyMd5BodyChecksumMiddleware(options) {
    var _this = this;
    return function (next) { return function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var request, body, headers, digest, hash, _a, _b, _c, _d, _e, _f, _g;
        return tslib_1.__generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    request = args.request;
                    if (!protocol_http_1.HttpRequest.isInstance(request)) return [3 /*break*/, 2];
                    body = request.body, headers = request.headers;
                    if (!!hasHeader("Content-MD5", headers)) return [3 /*break*/, 2];
                    digest = void 0;
                    if (body === undefined ||
                        typeof body === "string" ||
                        ArrayBuffer.isView(body) ||
                        is_array_buffer_1.isArrayBuffer(body)) {
                        hash = new options.md5();
                        hash.update(body || "");
                        digest = hash.digest();
                    }
                    else {
                        digest = options.streamHasher(options.md5, body);
                    }
                    _a = [tslib_1.__assign({}, request)];
                    _b = {};
                    _c = [tslib_1.__assign({}, headers)];
                    _d = {};
                    _e = "Content-MD5";
                    _g = (_f = options).base64Encoder;
                    return [4 /*yield*/, digest];
                case 1:
                    request = tslib_1.__assign.apply(void 0, _a.concat([(_b.headers = tslib_1.__assign.apply(void 0, _c.concat([(_d[_e] = _g.apply(_f, [_h.sent()]), _d)])), _b)]));
                    _h.label = 2;
                case 2: return [2 /*return*/, next(tslib_1.__assign(tslib_1.__assign({}, args), { request: request }))];
            }
        });
    }); }; };
}
exports.applyMd5BodyChecksumMiddleware = applyMd5BodyChecksumMiddleware;
exports.applyMd5BodyChecksumMiddlewareOptions = {
    name: "applyMd5BodyChecksumMiddleware",
    step: "build",
    tags: ["SET_CONTENT_MD5", "BODY_CHECKSUM"]
};
exports.getApplyMd5BodyChecksumPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(applyMd5BodyChecksumMiddleware(config), exports.applyMd5BodyChecksumMiddlewareOptions);
    }
}); };
function hasHeader(soughtHeader, headers) {
    var e_1, _a;
    soughtHeader = soughtHeader.toLowerCase();
    try {
        for (var _b = tslib_1.__values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var headerName = _c.value;
            if (soughtHeader === headerName.toLowerCase()) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHlNZDVCb2R5Q2hlY2tzdW1NaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwcGx5TWQ1Qm9keUNoZWNrc3VtTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0REFBeUQ7QUFXekQsd0RBQXFEO0FBR3JELFNBQWdCLDhCQUE4QixDQUM1QyxPQUFzQztJQUR4QyxpQkF3Q0M7SUFyQ0MsT0FBTyxVQUNMLElBQStCLElBQ0QsT0FBQSxVQUM5QixJQUFnQzs7Ozs7b0JBRTFCLE9BQU8sR0FBSyxJQUFJLFFBQVQsQ0FBVTt5QkFDbkIsMkJBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQS9CLHdCQUErQjtvQkFDekIsSUFBSSxHQUFjLE9BQU8sS0FBckIsRUFBRSxPQUFPLEdBQUssT0FBTyxRQUFaLENBQWE7eUJBQzlCLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBbEMsd0JBQWtDO29CQUNoQyxNQUFNLFNBQXFCLENBQUM7b0JBQ2hDLElBQ0UsSUFBSSxLQUFLLFNBQVM7d0JBQ2xCLE9BQU8sSUFBSSxLQUFLLFFBQVE7d0JBQ3hCLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO3dCQUN4QiwrQkFBYSxDQUFDLElBQUksQ0FBQyxFQUNuQjt3QkFDTSxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7d0JBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO3dCQUN4QixNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO3FCQUN4Qjt5QkFBTTt3QkFDTCxNQUFNLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO3FCQUNsRDsrQ0FHSSxPQUFPOzsrQ0FFTCxPQUFPOztvQkFDVixLQUFBLGFBQWEsQ0FBQTtvQkFBRSxLQUFBLENBQUEsS0FBQSxPQUFPLENBQUEsQ0FBQyxhQUFhLENBQUE7b0JBQUMscUJBQU0sTUFBTSxFQUFBOztvQkFKckQsT0FBTyw4Q0FFTCxVQUFPLDhDQUVMLE1BQWEsR0FBRSxjQUFzQixTQUFZLEVBQUMsZ0JBRXJELENBQUM7O3dCQUdOLHNCQUFPLElBQUksdUNBQ04sSUFBSSxLQUNQLE9BQU8sU0FBQSxJQUNQLEVBQUM7OztTQUNKLEVBbEMrQixDQWtDL0IsQ0FBQztBQUNKLENBQUM7QUF4Q0Qsd0VBd0NDO0FBRVksUUFBQSxxQ0FBcUMsR0FBd0I7SUFDeEUsSUFBSSxFQUFFLGdDQUFnQztJQUN0QyxJQUFJLEVBQUUsT0FBTztJQUNiLElBQUksRUFBRSxDQUFDLGlCQUFpQixFQUFFLGVBQWUsQ0FBQztDQUMzQyxDQUFDO0FBRVcsUUFBQSw2QkFBNkIsR0FBRyxVQUMzQyxNQUFxQyxJQUNiLE9BQUEsQ0FBQztJQUN6QixZQUFZLEVBQUUsVUFBQSxXQUFXO1FBQ3ZCLFdBQVcsQ0FBQyxHQUFHLENBQ2IsOEJBQThCLENBQUMsTUFBTSxDQUFDLEVBQ3RDLDZDQUFxQyxDQUN0QyxDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUMsRUFQd0IsQ0FPeEIsQ0FBQztBQUVILFNBQVMsU0FBUyxDQUFDLFlBQW9CLEVBQUUsT0FBa0I7O0lBQ3pELFlBQVksR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7O1FBQzFDLEtBQXlCLElBQUEsS0FBQSxpQkFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBLGdCQUFBLDRCQUFFO1lBQTFDLElBQU0sVUFBVSxXQUFBO1lBQ25CLElBQUksWUFBWSxLQUFLLFVBQVUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtnQkFDN0MsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGOzs7Ozs7Ozs7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0FycmF5QnVmZmVyIH0gZnJvbSBcIkBhd3Mtc2RrL2lzLWFycmF5LWJ1ZmZlclwiO1xuaW1wb3J0IHtcbiAgQnVpbGRIYW5kbGVyLFxuICBCdWlsZEhhbmRsZXJBcmd1bWVudHMsXG4gIEJ1aWxkSGFuZGxlck9wdGlvbnMsXG4gIEJ1aWxkSGFuZGxlck91dHB1dCxcbiAgQnVpbGRNaWRkbGV3YXJlLFxuICBNZXRhZGF0YUJlYXJlcixcbiAgSGVhZGVyQmFnLFxuICBQbHVnZ2FibGVcbn0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAYXdzLXNkay9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyBNZDVCb2R5Q2hlY2tzdW1SZXNvbHZlZENvbmZpZyB9IGZyb20gXCIuL21kNUNvbmZpZ3VyYXRpb25cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5TWQ1Qm9keUNoZWNrc3VtTWlkZGxld2FyZShcbiAgb3B0aW9uczogTWQ1Qm9keUNoZWNrc3VtUmVzb2x2ZWRDb25maWdcbik6IEJ1aWxkTWlkZGxld2FyZTxhbnksIGFueT4ge1xuICByZXR1cm4gPE91dHB1dCBleHRlbmRzIE1ldGFkYXRhQmVhcmVyPihcbiAgICBuZXh0OiBCdWlsZEhhbmRsZXI8YW55LCBPdXRwdXQ+XG4gICk6IEJ1aWxkSGFuZGxlcjxhbnksIE91dHB1dD4gPT4gYXN5bmMgKFxuICAgIGFyZ3M6IEJ1aWxkSGFuZGxlckFyZ3VtZW50czxhbnk+XG4gICk6IFByb21pc2U8QnVpbGRIYW5kbGVyT3V0cHV0PE91dHB1dD4+ID0+IHtcbiAgICBsZXQgeyByZXF1ZXN0IH0gPSBhcmdzO1xuICAgIGlmIChIdHRwUmVxdWVzdC5pc0luc3RhbmNlKHJlcXVlc3QpKSB7XG4gICAgICBjb25zdCB7IGJvZHksIGhlYWRlcnMgfSA9IHJlcXVlc3Q7XG4gICAgICBpZiAoIWhhc0hlYWRlcihcIkNvbnRlbnQtTUQ1XCIsIGhlYWRlcnMpKSB7XG4gICAgICAgIGxldCBkaWdlc3Q6IFByb21pc2U8VWludDhBcnJheT47XG4gICAgICAgIGlmIChcbiAgICAgICAgICBib2R5ID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICB0eXBlb2YgYm9keSA9PT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAgIEFycmF5QnVmZmVyLmlzVmlldyhib2R5KSB8fFxuICAgICAgICAgIGlzQXJyYXlCdWZmZXIoYm9keSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgaGFzaCA9IG5ldyBvcHRpb25zLm1kNSgpO1xuICAgICAgICAgIGhhc2gudXBkYXRlKGJvZHkgfHwgXCJcIik7XG4gICAgICAgICAgZGlnZXN0ID0gaGFzaC5kaWdlc3QoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaWdlc3QgPSBvcHRpb25zLnN0cmVhbUhhc2hlcihvcHRpb25zLm1kNSwgYm9keSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0ID0ge1xuICAgICAgICAgIC4uLnJlcXVlc3QsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgLi4uaGVhZGVycyxcbiAgICAgICAgICAgIFwiQ29udGVudC1NRDVcIjogb3B0aW9ucy5iYXNlNjRFbmNvZGVyKGF3YWl0IGRpZ2VzdClcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXh0KHtcbiAgICAgIC4uLmFyZ3MsXG4gICAgICByZXF1ZXN0XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBhcHBseU1kNUJvZHlDaGVja3N1bU1pZGRsZXdhcmVPcHRpb25zOiBCdWlsZEhhbmRsZXJPcHRpb25zID0ge1xuICBuYW1lOiBcImFwcGx5TWQ1Qm9keUNoZWNrc3VtTWlkZGxld2FyZVwiLFxuICBzdGVwOiBcImJ1aWxkXCIsXG4gIHRhZ3M6IFtcIlNFVF9DT05URU5UX01ENVwiLCBcIkJPRFlfQ0hFQ0tTVU1cIl1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXRBcHBseU1kNUJvZHlDaGVja3N1bVBsdWdpbiA9IChcbiAgY29uZmlnOiBNZDVCb2R5Q2hlY2tzdW1SZXNvbHZlZENvbmZpZ1xuKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IGNsaWVudFN0YWNrID0+IHtcbiAgICBjbGllbnRTdGFjay5hZGQoXG4gICAgICBhcHBseU1kNUJvZHlDaGVja3N1bU1pZGRsZXdhcmUoY29uZmlnKSxcbiAgICAgIGFwcGx5TWQ1Qm9keUNoZWNrc3VtTWlkZGxld2FyZU9wdGlvbnNcbiAgICApO1xuICB9XG59KTtcblxuZnVuY3Rpb24gaGFzSGVhZGVyKHNvdWdodEhlYWRlcjogc3RyaW5nLCBoZWFkZXJzOiBIZWFkZXJCYWcpOiBib29sZWFuIHtcbiAgc291Z2h0SGVhZGVyID0gc291Z2h0SGVhZGVyLnRvTG93ZXJDYXNlKCk7XG4gIGZvciAoY29uc3QgaGVhZGVyTmFtZSBvZiBPYmplY3Qua2V5cyhoZWFkZXJzKSkge1xuICAgIGlmIChzb3VnaHRIZWFkZXIgPT09IGhlYWRlck5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl19
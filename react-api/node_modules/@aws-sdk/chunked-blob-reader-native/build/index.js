"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_base64_browser_1 = require("@aws-sdk/util-base64-browser");
function blobReader(blob, onChunk, chunkSize) {
    if (chunkSize === void 0) { chunkSize = 1024 * 1024; }
    return new Promise(function (resolve, reject) {
        var fileReader = new FileReader();
        fileReader.onerror = reject;
        fileReader.onabort = reject;
        var size = blob.size;
        var totalBytesRead = 0;
        var read = function () {
            if (totalBytesRead >= size) {
                resolve();
                return;
            }
            fileReader.readAsDataURL(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));
        };
        fileReader.onload = function (event) {
            var result = event.target.result;
            // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
            // response from readAsDataURL is always prepended with "data:*/*;base64,"
            var dataOffset = result.indexOf(",") + 1;
            var data = result.substring(dataOffset);
            var decoded = util_base64_browser_1.fromBase64(data);
            onChunk(decoded);
            totalBytesRead += decoded.byteLength;
            // read the next block
            read();
        };
        // kick off the read
        read();
    });
}
exports.blobReader = blobReader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvRUFBMEQ7QUFDMUQsU0FBZ0IsVUFBVSxDQUN4QixJQUFVLEVBQ1YsT0FBb0MsRUFDcEMsU0FBK0I7SUFBL0IsMEJBQUEsRUFBQSxZQUFvQixJQUFJLEdBQUcsSUFBSTtJQUUvQixPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07UUFDakMsSUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUVwQyxVQUFVLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUM1QixVQUFVLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUU1QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQztRQUV2QixJQUFNLElBQUksR0FBRztZQUNYLElBQUksY0FBYyxJQUFJLElBQUksRUFBRTtnQkFDMUIsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsT0FBTzthQUNSO1lBQ0QsVUFBVSxDQUFDLGFBQWEsQ0FDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsY0FBYyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQ3ZFLENBQUM7UUFDSixDQUFDLENBQUM7UUFFRixVQUFVLENBQUMsTUFBTSxHQUFHLFVBQUEsS0FBSztZQUN2QixJQUFNLE1BQU0sR0FBSSxLQUFLLENBQUMsTUFBYyxDQUFDLE1BQU0sQ0FBQztZQUM1Qyx1RkFBdUY7WUFDdkYsMEVBQTBFO1lBQzFFLElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDMUMsSUFBTSxPQUFPLEdBQUcsZ0NBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakIsY0FBYyxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUM7WUFDckMsc0JBQXNCO1lBQ3RCLElBQUksRUFBRSxDQUFDO1FBQ1QsQ0FBQyxDQUFDO1FBRUYsb0JBQW9CO1FBQ3BCLElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBeENELGdDQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyb21CYXNlNjQgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1iYXNlNjQtYnJvd3NlclwiO1xuZXhwb3J0IGZ1bmN0aW9uIGJsb2JSZWFkZXIoXG4gIGJsb2I6IEJsb2IsXG4gIG9uQ2h1bms6IChjaHVuazogVWludDhBcnJheSkgPT4gdm9pZCxcbiAgY2h1bmtTaXplOiBudW1iZXIgPSAxMDI0ICogMTAyNFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICBmaWxlUmVhZGVyLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgZmlsZVJlYWRlci5vbmFib3J0ID0gcmVqZWN0O1xuXG4gICAgY29uc3Qgc2l6ZSA9IGJsb2Iuc2l6ZTtcbiAgICBsZXQgdG90YWxCeXRlc1JlYWQgPSAwO1xuXG4gICAgY29uc3QgcmVhZCA9ICgpID0+IHtcbiAgICAgIGlmICh0b3RhbEJ5dGVzUmVhZCA+PSBzaXplKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKFxuICAgICAgICBibG9iLnNsaWNlKHRvdGFsQnl0ZXNSZWFkLCBNYXRoLm1pbihzaXplLCB0b3RhbEJ5dGVzUmVhZCArIGNodW5rU2l6ZSkpXG4gICAgICApO1xuICAgIH07XG5cbiAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IChldmVudC50YXJnZXQgYXMgYW55KS5yZXN1bHQ7XG4gICAgICAvLyByZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GaWxlUmVhZGVyL3JlYWRBc0RhdGFVUkxcbiAgICAgIC8vIHJlc3BvbnNlIGZyb20gcmVhZEFzRGF0YVVSTCBpcyBhbHdheXMgcHJlcGVuZGVkIHdpdGggXCJkYXRhOiovKjtiYXNlNjQsXCJcbiAgICAgIGNvbnN0IGRhdGFPZmZzZXQgPSByZXN1bHQuaW5kZXhPZihcIixcIikgKyAxO1xuICAgICAgY29uc3QgZGF0YSA9IHJlc3VsdC5zdWJzdHJpbmcoZGF0YU9mZnNldCk7XG4gICAgICBjb25zdCBkZWNvZGVkID0gZnJvbUJhc2U2NChkYXRhKTtcbiAgICAgIG9uQ2h1bmsoZGVjb2RlZCk7XG4gICAgICB0b3RhbEJ5dGVzUmVhZCArPSBkZWNvZGVkLmJ5dGVMZW5ndGg7XG4gICAgICAvLyByZWFkIHRoZSBuZXh0IGJsb2NrXG4gICAgICByZWFkKCk7XG4gICAgfTtcblxuICAgIC8vIGtpY2sgb2ZmIHRoZSByZWFkXG4gICAgcmVhZCgpO1xuICB9KTtcbn1cbiJdfQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this
 * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be
 * removed entirely on requests to the us-east-1 region.
 */
function locationConstraintMiddleware(options) {
    var _this = this;
    return function (next) { return function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var CreateBucketConfiguration, region;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    CreateBucketConfiguration = args.input.CreateBucketConfiguration;
                    return [4 /*yield*/, options.region()];
                case 1:
                    region = _a.sent();
                    if (!CreateBucketConfiguration ||
                        !CreateBucketConfiguration.LocationConstraint) {
                        args = tslib_1.__assign(tslib_1.__assign({}, args), { input: tslib_1.__assign(tslib_1.__assign({}, args.input), { CreateBucketConfiguration: region === "us-east-1" ? undefined : { LocationConstraint: region } }) });
                    }
                    return [2 /*return*/, next(args)];
            }
        });
    }); }; };
}
exports.locationConstraintMiddleware = locationConstraintMiddleware;
exports.locationConstraintMiddlewareOptions = {
    step: "initialize",
    tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
    name: "locationConstraintMiddleware"
};
exports.getLocationConstraintPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(locationConstraintMiddleware(config), exports.locationConstraintMiddlewareOptions);
    }
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBV0E7Ozs7R0FJRztBQUVILFNBQWdCLDRCQUE0QixDQUMxQyxPQUF5QztJQUQzQyxpQkEyQkM7SUF4QkMsT0FBTyxVQUNMLElBQW9DLElBQ0QsT0FBQSxVQUNuQyxJQUFxQzs7Ozs7b0JBRTdCLHlCQUF5QixHQUFLLElBQUksQ0FBQyxLQUFLLDBCQUFmLENBQWdCO29CQUVsQyxxQkFBTSxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUE7O29CQUEvQixNQUFNLEdBQUcsU0FBc0I7b0JBQ3JDLElBQ0UsQ0FBQyx5QkFBeUI7d0JBQzFCLENBQUMseUJBQXlCLENBQUMsa0JBQWtCLEVBQzdDO3dCQUNBLElBQUkseUNBQ0MsSUFBSSxLQUNQLEtBQUssd0NBQ0EsSUFBSSxDQUFDLEtBQUssS0FDYix5QkFBeUIsRUFDdkIsTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxNQUV4RSxDQUFDO3FCQUNIO29CQUVELHNCQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQzs7O1NBQ25CLEVBckJvQyxDQXFCcEMsQ0FBQztBQUNKLENBQUM7QUEzQkQsb0VBMkJDO0FBRVksUUFBQSxtQ0FBbUMsR0FBNkI7SUFDM0UsSUFBSSxFQUFFLFlBQVk7SUFDbEIsSUFBSSxFQUFFLENBQUMscUJBQXFCLEVBQUUsNkJBQTZCLENBQUM7SUFDNUQsSUFBSSxFQUFFLDhCQUE4QjtDQUNyQyxDQUFDO0FBRVcsUUFBQSwyQkFBMkIsR0FBRyxVQUN6QyxNQUF3QyxJQUNoQixPQUFBLENBQUM7SUFDekIsWUFBWSxFQUFFLFVBQUEsV0FBVztRQUN2QixXQUFXLENBQUMsR0FBRyxDQUNiLDRCQUE0QixDQUFDLE1BQU0sQ0FBQyxFQUNwQywyQ0FBbUMsQ0FDcEMsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFDLEVBUHdCLENBT3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBJbml0aWFsaXplSGFuZGxlcixcbiAgSW5pdGlhbGl6ZU1pZGRsZXdhcmUsXG4gIEluaXRpYWxpemVIYW5kbGVyQXJndW1lbnRzLFxuICBJbml0aWFsaXplSGFuZGxlck9wdGlvbnMsXG4gIEluaXRpYWxpemVIYW5kbGVyT3V0cHV0LFxuICBNZXRhZGF0YUJlYXJlcixcbiAgUGx1Z2dhYmxlXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgTG9jYXRpb25Db25zdHJhaW50UmVzb2x2ZWRDb25maWcgfSBmcm9tIFwiLi9jb25maWd1cmF0aW9uXCI7XG5cbi8qKlxuICogVGhpcyBtaWRkbGV3YXJlIG1vZGlmaWVzIHRoZSBpbnB1dCBvbiBTMyBDcmVhdGVCdWNrZXQgcmVxdWVzdHMuICBJZiB0aGUgTG9jYXRpb25Db25zdHJhaW50IGhhcyBub3QgYmVlbiBzZXQsIHRoaXNcbiAqIG1pZGRsZXdhcmUgd2lsbCBzZXQgYSBMb2NhdGlvbkNvbnN0cmFpbnQgdG8gbWF0Y2ggdGhlIGNvbmZpZ3VyZWQgcmVnaW9uLiAgVGhlIENyZWF0ZUJ1Y2tldENvbmZpZ3VyYXRpb24gd2lsbCBiZVxuICogcmVtb3ZlZCBlbnRpcmVseSBvbiByZXF1ZXN0cyB0byB0aGUgdXMtZWFzdC0xIHJlZ2lvbi5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbG9jYXRpb25Db25zdHJhaW50TWlkZGxld2FyZShcbiAgb3B0aW9uczogTG9jYXRpb25Db25zdHJhaW50UmVzb2x2ZWRDb25maWdcbik6IEluaXRpYWxpemVNaWRkbGV3YXJlPGFueSwgYW55PiB7XG4gIHJldHVybiA8T3V0cHV0IGV4dGVuZHMgTWV0YWRhdGFCZWFyZXI+KFxuICAgIG5leHQ6IEluaXRpYWxpemVIYW5kbGVyPGFueSwgT3V0cHV0PlxuICApOiBJbml0aWFsaXplSGFuZGxlcjxhbnksIE91dHB1dD4gPT4gYXN5bmMgKFxuICAgIGFyZ3M6IEluaXRpYWxpemVIYW5kbGVyQXJndW1lbnRzPGFueT5cbiAgKTogUHJvbWlzZTxJbml0aWFsaXplSGFuZGxlck91dHB1dDxPdXRwdXQ+PiA9PiB7XG4gICAgY29uc3QgeyBDcmVhdGVCdWNrZXRDb25maWd1cmF0aW9uIH0gPSBhcmdzLmlucHV0O1xuICAgIC8vQWZ0ZXIgcmVnaW9uIGNvbmZpZyByZXNvbHV0aW9uLCByZWdpb24gaXMgYSBQcm92aWRlcjxzdHJpbmc+XG4gICAgY29uc3QgcmVnaW9uID0gYXdhaXQgb3B0aW9ucy5yZWdpb24oKTtcbiAgICBpZiAoXG4gICAgICAhQ3JlYXRlQnVja2V0Q29uZmlndXJhdGlvbiB8fFxuICAgICAgIUNyZWF0ZUJ1Y2tldENvbmZpZ3VyYXRpb24uTG9jYXRpb25Db25zdHJhaW50XG4gICAgKSB7XG4gICAgICBhcmdzID0ge1xuICAgICAgICAuLi5hcmdzLFxuICAgICAgICBpbnB1dDoge1xuICAgICAgICAgIC4uLmFyZ3MuaW5wdXQsXG4gICAgICAgICAgQ3JlYXRlQnVja2V0Q29uZmlndXJhdGlvbjpcbiAgICAgICAgICAgIHJlZ2lvbiA9PT0gXCJ1cy1lYXN0LTFcIiA/IHVuZGVmaW5lZCA6IHsgTG9jYXRpb25Db25zdHJhaW50OiByZWdpb24gfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0KGFyZ3MpO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgbG9jYXRpb25Db25zdHJhaW50TWlkZGxld2FyZU9wdGlvbnM6IEluaXRpYWxpemVIYW5kbGVyT3B0aW9ucyA9IHtcbiAgc3RlcDogXCJpbml0aWFsaXplXCIsXG4gIHRhZ3M6IFtcIkxPQ0FUSU9OX0NPTlNUUkFJTlRcIiwgXCJDUkVBVEVfQlVDS0VUX0NPTkZJR1VSQVRJT05cIl0sXG4gIG5hbWU6IFwibG9jYXRpb25Db25zdHJhaW50TWlkZGxld2FyZVwiXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TG9jYXRpb25Db25zdHJhaW50UGx1Z2luID0gKFxuICBjb25maWc6IExvY2F0aW9uQ29uc3RyYWludFJlc29sdmVkQ29uZmlnXG4pOiBQbHVnZ2FibGU8YW55LCBhbnk+ID0+ICh7XG4gIGFwcGx5VG9TdGFjazogY2xpZW50U3RhY2sgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZChcbiAgICAgIGxvY2F0aW9uQ29uc3RyYWludE1pZGRsZXdhcmUoY29uZmlnKSxcbiAgICAgIGxvY2F0aW9uQ29uc3RyYWludE1pZGRsZXdhcmVPcHRpb25zXG4gICAgKTtcbiAgfVxufSk7XG4iXX0=
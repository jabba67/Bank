"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hash_calculator_1 = require("./hash-calculator");
const fs_1 = require("fs");
exports.fileStreamHasher = function fileStreamHasher(hashCtor, fileStream) {
    return new Promise((resolve, reject) => {
        if (!isReadStream(fileStream)) {
            reject(new Error("Unable to calculate hash for non-file streams."));
            return;
        }
        const fileStreamTee = fs_1.createReadStream(fileStream.path, {
            start: fileStream.start,
            end: fileStream.end
        });
        const hash = new hashCtor();
        const hashCalculator = new hash_calculator_1.HashCalculator(hash);
        fileStreamTee.pipe(hashCalculator);
        fileStreamTee.on("error", (err) => {
            // if the source errors, the destination stream needs to manually end
            hashCalculator.end();
            reject(err);
        });
        hashCalculator.on("error", reject);
        hashCalculator.on("finish", function () {
            hash.digest().then(resolve).catch(reject);
        });
    });
};
function isReadStream(stream) {
    return typeof stream.path === "string";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx1REFBbUQ7QUFDbkQsMkJBQWtEO0FBR3JDLFFBQUEsZ0JBQWdCLEdBQTJCLFNBQVMsZ0JBQWdCLENBQy9FLFFBQXlCLEVBQ3pCLFVBQW9CO0lBRXBCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUM3QixNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQyxDQUFDO1lBQ3BFLE9BQU87U0FDUjtRQUVELE1BQU0sYUFBYSxHQUFHLHFCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUU7WUFDdEQsS0FBSyxFQUFHLFVBQWtCLENBQUMsS0FBSztZQUNoQyxHQUFHLEVBQUcsVUFBa0IsQ0FBQyxHQUFHO1NBQzdCLENBQUMsQ0FBQztRQUVILE1BQU0sSUFBSSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7UUFDNUIsTUFBTSxjQUFjLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhELGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDbkMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFRLEVBQUUsRUFBRTtZQUNyQyxxRUFBcUU7WUFDckUsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ0gsY0FBYyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7WUFDMUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLFNBQVMsWUFBWSxDQUFDLE1BQWdCO0lBQ3BDLE9BQU8sT0FBUSxNQUFxQixDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7QUFDekQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhhc2gsIEhhc2hDb25zdHJ1Y3RvciwgU3RyZWFtSGFzaGVyIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBIYXNoQ2FsY3VsYXRvciB9IGZyb20gXCIuL2hhc2gtY2FsY3VsYXRvclwiO1xuaW1wb3J0IHsgY3JlYXRlUmVhZFN0cmVhbSwgUmVhZFN0cmVhbSB9IGZyb20gXCJmc1wiO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG5cbmV4cG9ydCBjb25zdCBmaWxlU3RyZWFtSGFzaGVyOiBTdHJlYW1IYXNoZXI8UmVhZGFibGU+ID0gZnVuY3Rpb24gZmlsZVN0cmVhbUhhc2hlcihcbiAgaGFzaEN0b3I6IEhhc2hDb25zdHJ1Y3RvcixcbiAgZmlsZVN0cmVhbTogUmVhZGFibGVcbik6IFByb21pc2U8VWludDhBcnJheT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmICghaXNSZWFkU3RyZWFtKGZpbGVTdHJlYW0pKSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKFwiVW5hYmxlIHRvIGNhbGN1bGF0ZSBoYXNoIGZvciBub24tZmlsZSBzdHJlYW1zLlwiKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZmlsZVN0cmVhbVRlZSA9IGNyZWF0ZVJlYWRTdHJlYW0oZmlsZVN0cmVhbS5wYXRoLCB7XG4gICAgICBzdGFydDogKGZpbGVTdHJlYW0gYXMgYW55KS5zdGFydCxcbiAgICAgIGVuZDogKGZpbGVTdHJlYW0gYXMgYW55KS5lbmRcbiAgICB9KTtcblxuICAgIGNvbnN0IGhhc2ggPSBuZXcgaGFzaEN0b3IoKTtcbiAgICBjb25zdCBoYXNoQ2FsY3VsYXRvciA9IG5ldyBIYXNoQ2FsY3VsYXRvcihoYXNoKTtcblxuICAgIGZpbGVTdHJlYW1UZWUucGlwZShoYXNoQ2FsY3VsYXRvcik7XG4gICAgZmlsZVN0cmVhbVRlZS5vbihcImVycm9yXCIsIChlcnI6IGFueSkgPT4ge1xuICAgICAgLy8gaWYgdGhlIHNvdXJjZSBlcnJvcnMsIHRoZSBkZXN0aW5hdGlvbiBzdHJlYW0gbmVlZHMgdG8gbWFudWFsbHkgZW5kXG4gICAgICBoYXNoQ2FsY3VsYXRvci5lbmQoKTtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH0pO1xuICAgIGhhc2hDYWxjdWxhdG9yLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcbiAgICBoYXNoQ2FsY3VsYXRvci5vbihcImZpbmlzaFwiLCBmdW5jdGlvbiAodGhpczogSGFzaENhbGN1bGF0b3IpIHtcbiAgICAgIGhhc2guZGlnZXN0KCkudGhlbihyZXNvbHZlKS5jYXRjaChyZWplY3QpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGlzUmVhZFN0cmVhbShzdHJlYW06IFJlYWRhYmxlKTogc3RyZWFtIGlzIFJlYWRTdHJlYW0ge1xuICByZXR1cm4gdHlwZW9mIChzdHJlYW0gYXMgUmVhZFN0cmVhbSkucGF0aCA9PT0gXCJzdHJpbmdcIjtcbn1cbiJdfQ==
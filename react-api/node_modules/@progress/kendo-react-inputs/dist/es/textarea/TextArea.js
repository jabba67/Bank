var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { guid, classNames, getTabIndex, dispatchEvent, useDir } from '@progress/kendo-react-common';
/**
 * Represents the [KendoReact TextArea component]({% slug overview_textarea %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <TextArea />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export var TextArea = React.forwardRef(function (props, target) {
    var ariaDescribedBy = props.ariaDescribedBy, ariaLabelledBy = props.ariaLabelledBy, autoSize = props.autoSize, className = props.className, defaultValue = props.defaultValue, disabled = props.disabled, readOnly = props.readOnly, required = props.required, rows = props.rows, id = props.id, name = props.name, placeholder = props.placeholder, style = props.style, tabIndex = props.tabIndex, value = props.value, valid = props.valid, validationMessage = props.validationMessage, validityStyles = props.validityStyles, onChange = props.onChange, onFocus = props.onFocus, others = __rest(props, ["ariaDescribedBy", "ariaLabelledBy", "autoSize", "className", "defaultValue", "disabled", "readOnly", "required", "rows", "id", "name", "placeholder", "style", "tabIndex", "value", "valid", "validationMessage", "validityStyles", "onChange", "onFocus"]);
    var elementRef = React.useRef(null);
    var focusElement = React.useCallback(function () {
        if (elementRef.current) {
            elementRef.current.focus();
        }
    }, []);
    var getImperativeHandle = React.useCallback(function () { return ({
        element: elementRef,
        focus: focusElement
    }); }, [focusElement]);
    React.useImperativeHandle(target, getImperativeHandle);
    var _a = React.useState(defaultValue), stateValue = _a[0], setStateValue = _a[1];
    var _b = React.useState('auto'), textAreaHeight = _b[0], setTextAreaHeight = _b[1];
    var calculatedId = React.useMemo(function () { return guid(); }, []);
    var dir = useDir(elementRef, props.dir);
    var isControlled = value !== undefined;
    var currentValue = isControlled ? value : stateValue;
    var isValid = valid !== undefined ?
        valid :
        !required ?
            true :
            currentValue ? true : false;
    React.useEffect(function () {
        if (elementRef.current && elementRef.current.setCustomValidity) {
            elementRef.current.setCustomValidity(isValid
                ? ''
                : (validationMessage || ''));
        }
    }, [isValid, validationMessage]);
    React.useLayoutEffect(function () {
        if (elementRef.current) {
            setTextAreaHeight(elementRef.current.scrollHeight + "px");
        }
    }, [currentValue]);
    var handleChange = React.useCallback(function (event) {
        var newValue = event.target.value;
        if (!isControlled && !disabled) {
            setTextAreaHeight('auto');
            setStateValue(newValue);
        }
        if (onChange && !disabled) {
            dispatchEvent(onChange, event, getImperativeHandle(), { value: newValue });
        }
    }, [setStateValue, onChange, disabled, isControlled]);
    var handleFocus = React.useCallback(function (event) {
        if (onFocus && !disabled) {
            dispatchEvent(onFocus, event, getImperativeHandle(), undefined);
        }
    }, [onFocus, disabled]);
    var spanProps = {
        className: classNames('k-textarea', {
            'k-state-invalid': !(isValid || validityStyles !== undefined || validityStyles === true)
        }, className),
        style: style,
        dir: dir
    };
    var textAreaProps = __assign({ id: id || calculatedId, name: name, className: 'k-input', ref: elementRef, disabled: disabled, rows: rows, placeholder: placeholder, readOnly: readOnly, required: required, tabIndex: getTabIndex(tabIndex, disabled), style: autoSize ? { resize: 'none', overflow: 'hidden', height: textAreaHeight } : {}, 'aria-labelledby': ariaLabelledBy, 'aria-describedby': ariaDescribedBy, 'aria-multiline': true, 'aria-disabled': disabled || undefined, value: isControlled ? value : stateValue }, others, { onChange: handleChange, onFocus: handleFocus });
    return (React.createElement("span", __assign({}, spanProps),
        React.createElement("textarea", __assign({}, textAreaProps))));
});
TextArea.propTypes = {
    ariaDescribedBy: PropTypes.string,
    ariaLabelledBy: PropTypes.string,
    autoSize: PropTypes.bool,
    className: PropTypes.string,
    defaultValue: PropTypes.string,
    dir: PropTypes.string,
    disabled: PropTypes.bool,
    readOnly: PropTypes.bool,
    rows: PropTypes.number,
    id: PropTypes.string,
    name: PropTypes.string,
    placeholder: PropTypes.string,
    style: PropTypes.object,
    tabIndex: PropTypes.number,
    value: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.arrayOf(PropTypes.string),
        PropTypes.number
    ]),
    onChange: PropTypes.func,
    onFocus: PropTypes.func
};
TextArea.displayName = 'KendoTextArea';
//# sourceMappingURL=TextArea.js.map
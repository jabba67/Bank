import * as React from 'react';
import * as PropTypes from 'prop-types';
import { classNames, focusFirstFocusableChild, guid } from '@progress/kendo-react-common';
/**
 * Represents the [KendoReact AppBar component]({% slug overview_appbar %}).
 * Used to display information, actions, branding titles and additional navigation on the current screen.
 *
 * @example
 * ```jsx
 *
 * const App = () => {
 *   return (
 *       <AppBar>
 *           <AppBarSection>
 *               <span className="k-icon k-i-menu" />
 *           </AppBarSection>
 *
 *           <AppBarSpacer style={{ width: 8 }} />
 *
 *           <AppBarSection>
 *               <h1 className="title">{tc.text} AppBar</h1>
 *           </AppBarSection>
 *
 *           <AppBarSpacer />
 *
 *           <AppBarSection>
 *               <BadgeContainer>
 *                   <span className="k-icon k-i-bell" />
 *                   <Badge themeColor="info" shape="dot" />
 *               </BadgeContainer>
 *           </AppBarSection>
 *      </AppBar>
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export var AppBar = React.forwardRef(function (props, target) {
    var children = props.children, className = props.className, style = props.style, id = props.id;
    var elementRef = React.useRef(null);
    var focusElement = React.useCallback(function () {
        if (elementRef.current) {
            focusFirstFocusableChild(elementRef.current);
        }
    }, []);
    var getImperativeHandle = React.useCallback(function () { return ({
        element: elementRef.current,
        focus: focusElement
    }); }, [focusElement]);
    React.useImperativeHandle(target, getImperativeHandle);
    var calculatedId = React.useMemo(function () { return guid(); }, []);
    var themeColor = React.useMemo(function () { return props.themeColor || defaultProps.themeColor; }, [props.themeColor]);
    var position = React.useMemo(function () { return props.position || defaultProps.position; }, [props.position]);
    var positionMode = React.useMemo(function () { return props.positionMode || defaultProps.positionMode; }, [props.positionMode]);
    var appbarClasses = React.useMemo(function () { return classNames('k-appbar', {
        'k-appbar-top': position === 'top',
        'k-appbar-bottom': position === 'bottom',
        'k-appbar-static': positionMode === 'static',
        'k-appbar-sticky': positionMode === 'sticky',
        'k-appbar-fixed': positionMode === 'fixed',
        'k-appbar-light': themeColor === 'light',
        'k-appbar-dark': themeColor === 'dark',
        'k-appbar-inherit': themeColor === 'inherit'
    }, className); }, [position, positionMode, themeColor, className]);
    return (React.createElement("div", { className: appbarClasses, style: style, id: id || calculatedId }, children));
});
AppBar.propTypes = {
    children: PropTypes.any,
    className: PropTypes.string,
    style: PropTypes.object,
    id: PropTypes.string,
    themeColor: PropTypes.string,
    position: PropTypes.oneOf(['top', 'bottom']),
    positionMode: PropTypes.oneOf(['static', 'sticky', 'fixed'])
};
var defaultProps = {
    themeColor: 'light',
    position: 'top',
    positionMode: 'static'
};
AppBar.displayName = 'KendoAppBar';
//# sourceMappingURL=AppBar.js.map
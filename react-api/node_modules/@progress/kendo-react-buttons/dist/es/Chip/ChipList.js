var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { useDir, getTabIndex, classNames } from '@progress/kendo-react-common';
import { selectionReducer } from './selection-reducer';
import { focusReducer } from './focus-reducer';
import { dataReducer } from './data-reducer';
import { Chip } from './Chip';
/**
 * @hidden
 */
export var ChipListSelectionContext = React.createContext([null, function (_args) {
        /**/
    }]);
/**
 * @hidden
 */
export var ChipListFocusContext = React.createContext([null, function (_args) {
        /**/
    }]);
/**
 * @hidden
 */
export var ChipListDataContext = React.createContext([null, function (_args) {
        /**/
    }]);
/**
 * @hidden
 */
var useSelection = function (defaultValue, args, callback) {
    var _a = React.useState(defaultValue), state = _a[0], setState = _a[1];
    var handleDispatchSelection = function (action) {
        var newState = selectionReducer(args.state || state, __assign({}, action, args));
        if (callback) {
            callback(newState, action.event);
        }
        setState(newState);
    };
    return [state, handleDispatchSelection];
};
/**
 * @hidden
 */
var useFocus = function (args) {
    var _a = React.useState(null), state = _a[0], setState = _a[1];
    var handleDispatchFocus = function (action) {
        var newState = focusReducer(action.payload, __assign({}, action, args));
        setState(newState);
    };
    return [state, handleDispatchFocus];
};
/**
 * @hidden
 */
var useData = function (defaultData, args, callback) {
    var _a = React.useState(defaultData), state = _a[0], setState = _a[1];
    var handleDispatchData = function (action) {
        var newState = dataReducer(args.state || state, __assign({}, action, args));
        if (callback) {
            callback(newState, action.event);
        }
        setState(newState);
    };
    return [state, handleDispatchData];
};
/**
 * Represents the ChipList component.
 */
export var ChipList = React.forwardRef(function (props, ref) {
    var target = React.useRef(null);
    var chipListRef = React.useRef(null);
    var dir = useDir(chipListRef, props.dir);
    var ChipComponent = React.useMemo(function () { return props.chip || Chip; }, [props.chip, Chip]);
    var selection = React.useMemo(function () { return props.selection || defaultProps.selection; }, [props.selection, defaultProps.selection]);
    React.useImperativeHandle(target, function () { return ({
        element: chipListRef.current,
        props: props
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var handleChange = React.useCallback(function (newValue, event) {
        if (props.onChange && target.current) {
            props.onChange.call(undefined, {
                value: newValue,
                target: target.current,
                syntheticEvent: event
            });
        }
    }, [props.onChange]);
    var _a = useSelection(props.value || props.defaultValue, {
        selection: selection,
        state: props.value
    }, handleChange), stateValue = _a[0], dispatchStateValue = _a[1];
    var handleDataChange = React.useCallback(function (newData, event) {
        if (props.onDataChange && target.current) {
            props.onDataChange.call(undefined, {
                value: newData,
                target: target.current,
                syntheticEvent: event
            });
        }
    }, [props.onDataChange]);
    var _b = useData(props.data || props.defaultData || defaultProps.defaultData, {
        state: props.data,
        valueField: props.valueField || defaultProps.valueField
    }, handleDataChange), stateData = _b[0], dispatchData = _b[1];
    var itemsReducer = React.useCallback(function (acc, current) {
        acc.push(current[props.valueField || defaultProps.valueField]);
        return acc;
    }, [props.valueField, defaultProps.valueField]);
    var data = React.useMemo(function () { return props.data || stateData; }, [props.data, stateData]);
    var value = React.useMemo(function () { return props.value || stateValue; }, [props.value, stateValue]);
    var items = React.useMemo(function () { return data.reduce(itemsReducer, []); }, [data, itemsReducer]);
    var _c = useFocus({ items: items }), focus = _c[0], dispatchFocus = _c[1];
    return (React.createElement(ChipListSelectionContext.Provider, { value: [value, dispatchStateValue] },
        React.createElement(ChipListFocusContext.Provider, { value: [focus, dispatchFocus] },
            React.createElement(ChipListDataContext.Provider, { value: [data, dispatchData] },
                React.createElement("div", { ref: chipListRef, id: props.id, dir: dir, tabIndex: getTabIndex(props.tabIndex, props.disabled, undefined), className: classNames('k-chip-list', {
                        'k-rtl': dir === 'rtl',
                        'k-selection-single': selection === 'single',
                        'k-selection-multiple': selection === 'multiple',
                        'k-state-disabled': props.disabled
                    }), "aria-labelledby": props.ariaLabelledBy, "aria-describedby": props.ariaDescribedBy }, data.map(function (item) {
                    return (React.createElement(ChipComponent, { dataItem: item, key: item[props.valueField || defaultProps.valueField], text: item[props.textField || defaultProps.textField], value: item[props.valueField || defaultProps.valueField] }));
                }))))));
});
var propTypes = {
    id: PropTypes.string,
    className: PropTypes.string,
    tabIndex: PropTypes.number,
    data: PropTypes.any,
    defaultData: PropTypes.arrayOf(PropTypes.any),
    onDataChange: PropTypes.func,
    value: PropTypes.oneOf([PropTypes.any, PropTypes.arrayOf(PropTypes.any)]),
    defaultValue: PropTypes.oneOf([PropTypes.any, PropTypes.arrayOf(PropTypes.any)]),
    onChange: PropTypes.func,
    selection: PropTypes.string,
    textField: PropTypes.string,
    valueField: PropTypes.string,
    disabled: PropTypes.bool,
    dir: PropTypes.oneOf(['ltr', 'rtl']),
    ariaLabelledBy: PropTypes.string,
    ariaDescribedBy: PropTypes.string
};
var defaultProps = {
    chip: Chip,
    disabled: false,
    defaultValue: null,
    defaultData: [],
    dir: 'ltr',
    selection: 'none',
    textField: 'text',
    valueField: 'value',
    removable: 'removable'
};
ChipList.displayName = 'KendoReactChipList';
// TODO: delete casting when @types/react is updated!
ChipList.propTypes = propTypes;
ChipList.defaultProps = defaultProps;
//# sourceMappingURL=ChipList.js.map